{"version":3,"file":"static/js/8.9b21dfa3.chunk.js","mappings":"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","sources":["components/randomChar/RandomChar.js","components/charList/CharList.js","components/errorBoundary/ErrorBoundary.js","components/skeleton/Skeleton.js","components/charSidePanel/CharSidePanel.js","components/modal/Modal.js","components/pages/MainPage.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport useMarvelServices from '../../services/MarvelServices';\r\nimport Spinner from \"../UI/Spinner\"\r\nimport ErrorMessage from '../UI/ErrorMessage'\r\n\r\nimport './RandomChar.sass'\r\n\r\nconst  RandomChar = () => {\r\n\r\n    const [char, setChar] = useState({});\r\n    const {error, getCharacter, loading, clearError} = useMarvelServices();\r\n    \r\n    useEffect(()=> {\r\n        updateChar()\r\n    }, [])\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n    \r\n\r\n    const updateChar = () => {\r\n        clearError()\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n        getCharacter(id)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n \r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const content = !(loading || error) ? <View char={char}/> : null;\r\n    return(\r\n        <section className='random-char'>\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n            <div className=\"random-char__new\">\r\n                <p className=\"random-char__text\">\r\n                    Random character for today!\r\n                    Do you want to get to know him better?\r\n                    <br /> <br />\r\n                    Or choose another one\r\n                </p>\r\n                <button onClick={updateChar} className='btn btn_red btn_dark-bg'>TRY IT</button>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nconst View = ({char}) => {\r\n    let {name, description, thumbnail, homepage, wiki} = char;\r\n    let imgStyle = {'objectFit' : 'cover'};\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        imgStyle = {'objectFit' : 'contain'};\r\n    }\r\n    \r\n    return (\r\n        <div className=\"random-char__about\">\r\n            <div  className=\"random-char__img\">\r\n                <img src={thumbnail} alt={name} style={imgStyle}/>\r\n            </div>\r\n            <div className=\"random-char__info\">\r\n                <div className=\"random-char__name\">{name}</div>\r\n                <p className=\"random-char__descr\">\r\n                    {description}\r\n                </p>\r\n                <div className=\"random-char__btns\">\r\n                    <a href={homepage} className='btn btn_red' rel=\"noreferrer\" target='_blank'>HOMEPAGE</a>\r\n                    <a href={wiki} className='btn btn_gray' rel=\"noreferrer\" target='_blank'>WIKI</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomChar;","import { useEffect, useState, useRef } from 'react'\r\nimport PropTypes from 'prop-types'; \r\n\r\nimport Spinner from \"../UI/Spinner\"\r\nimport ErrorMessage from '../UI/ErrorMessage'\r\nimport useMarvelServices from '../../services/MarvelServices';\r\nimport './CharList.sass'\r\n\r\nfunction CharList(props) {\r\n\r\n    const [charList, setCharList] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(210);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n   \r\n    const {loading , error, getAllCharacters} = useMarvelServices();\r\n    \r\n    useEffect(()=> {\r\n        onRequest(offset, true)\r\n    }, [])\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n\r\n        getAllCharacters(offset)\r\n        .then(onCharListLoaded);\r\n    }\r\n    \r\n    const onCharListLoaded = (newCharList) => {\r\n        let ended = false;\r\n\r\n        if(newCharList.length < 9) {\r\n            ended = true;\r\n        }\r\n            setCharList(charList => [...charList, ...newCharList]);\r\n            setNewItemLoading(false);\r\n            setOffset(offset => offset + 9);\r\n            setCharEnded(ended);\r\n    }\r\n\r\n    const itemRefs = useRef([]);\r\n\r\n    const focusOnItem = (id) => {\r\n        itemRefs.current.forEach(item => item.classList.remove('char-list__card_selected'));\r\n        itemRefs.current[id].classList.add('char-list__card_selected');\r\n        itemRefs.current[id].focus();\r\n    }\r\n\r\n    function renderItems (arr) {\r\n        const items = arr.map((item, i) => {\r\n            let imgStyle = {'objectFit' : 'cover'}\r\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n                imgStyle = {'objectFit' : 'unset'};\r\n            } else if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif') {\r\n                imgStyle = {'objectFit' : 'contain'};\r\n            }\r\n            return(\r\n                <li className=\"char-list__card\"\r\n                    ref={el => itemRefs.current[i] = el}\r\n                    tabIndex={0}\r\n                    key={item.id}\r\n                    onKeyDown={(e) => {\r\n                        if (e.key === ' ' || e.key === \"Enter\") {\r\n                            e.preventDefault()\r\n                            props.onCharSelected(item.id);\r\n                            focusOnItem(i);\r\n                        }\r\n                    }}\r\n                    onClick={() => {\r\n                        props.onCharSelected(item.id)\r\n                        focusOnItem(i);\r\n                    }}    \r\n                >\r\n                    <div className=\"char-list__img\">\r\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle} />\r\n                    </div>\r\n                    <div className=\"char-list__name\">{item.name}</div>\r\n                </li>\r\n            )\r\n        })\r\n\r\n        return (\r\n            <ul className=\"char-list__wrap\">\r\n                {items}\r\n            </ul>\r\n        )\r\n        \r\n    }\r\n        \r\n    const items = renderItems(charList);\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\r\n\r\n    console.log('Render')\r\n\r\n    return (\r\n        <section className='char-list bg-decoration'>\r\n            {errorMessage}\r\n            {spinner}\r\n            {items}\r\n            <button \r\n                className=\"btn btn_red btn_long btn_main\"\r\n                style={{display: charEnded? 'none' : 'block'}}\r\n                disabled={newItemLoading}\r\n                onClick={() => onRequest(offset)} \r\n            >\r\n                LOAD MORE\r\n            </button>\r\n        </section>\r\n    )\r\n}\r\n\r\nCharList.propTypes = {\r\n    onCharSelected: PropTypes.func\r\n}\r\n\r\nexport default CharList;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../UI/ErrorMessage\";\r\n\r\nexport default class ErrorBoundary extends Component {\r\n\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch = (error, errorInfo) => {\r\n        this.setState({\r\n            error: true\r\n        })\r\n\r\n        console.log(error, errorInfo)\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage />\r\n        }\r\n\r\n        return this.props.children\r\n    }\r\n}","import './Skeleton.sass'\r\n\r\nexport default function Skeleton() {\r\n    return(\r\n        <nav className=\"skeleton\">\r\n            <h2 className=\"skeleton__title\">Please select a character to see information</h2>\r\n            <div className=\"skeleton__wrap pulse\">\r\n                <div className=\"skeleton__cyrcle\"></div>\r\n                <div className=\"skeleton__line\"></div>\r\n                <div className=\"skeleton__line\"></div>\r\n                <div className=\"skeleton__line\"></div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}","import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types'; \r\n\r\nimport {Link} from 'react-router-dom'\r\n\r\nimport Spinner from \"../UI/Spinner\"\r\nimport ErrorMessage from '../UI/ErrorMessage'\r\nimport useMarvelServices from '../../services/MarvelServices';\r\nimport Skeleton from '../skeleton/Skeleton';\r\n\r\nimport './CharSidePanel.sass'\r\n\r\nconst CharSidePanel = (props) => {\r\n\r\n    const [char, setChar] = useState(null)\r\n\r\n    const {error, getCharacter, loading, clearError} = useMarvelServices();\r\n\r\n    useEffect(() => {\r\n        updateChar()\r\n    }, [props.charId])\r\n\r\n    useEffect(() => {\r\n        updateChar()\r\n    }, [])\r\n\r\n    const updateChar = () => {\r\n        const {charId} = props;\r\n        if (!charId) {\r\n            return;\r\n        }\r\n        \r\n        clearError()\r\n        getCharacter(charId)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char)\r\n    }\r\n\r\n    const skeleton = char || loading || error ? null : <Skeleton/>;\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\r\n    return(\r\n        <section className='char-side-panel'>\r\n            {skeleton}\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </section>\r\n    )\r\n}\r\n\r\nconst View = ({char}) => {\r\n\r\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\r\n\r\n    let imgStyle = {'objectFit' : 'cover'};\r\n\r\n    if (\r\n        thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' \r\n        || thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif'\r\n        ) {\r\n        imgStyle = {'objectFit' : 'contain'};\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"char-side-panel__wrap\">\r\n            <div  className=\"char-side-panel__img\">\r\n                <img src={thumbnail} alt={name} style={imgStyle} />\r\n            </div>\r\n            <div className=\"char-side-panel__info\">\r\n                <div className=\"random-char__name\">{name}</div>\r\n                <div className=\"char-side-panel__btns\">\r\n                    <a href={homepage} rel=\"noreferrer\" target='_blank' className='btn btn_red'>HOMEPAGE</a>\r\n                    <a href={wiki} rel=\"noreferrer\" target='_blank' className='btn btn_gray'>WIKI</a>\r\n                </div>\r\n            </div>\r\n            </div>\r\n            <p className=\"random-char__descr char-side-panel__descr\">{description}</p>\r\n            <div className=\"char-side-panel__comics-title\">Comics:</div>\r\n            <ul className=\"char-side-panel__comics-list\">\r\n                {comics.length > 0 ? null : 'There is no comics with this character'}\r\n                {comics.map((item, i) =>{ \r\n                    // eslint-disable-next-line\r\n                    if (i > 9) return;\r\n                    return (\r\n                        <li key={i} className=\"char-side-panel__comics-item\"><Link to={`comics/${item.resourceURI.substr(43)}`} className='char-side__link'>{item.name}</Link></li>\r\n                    )\r\n                })}\r\n        </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nCharSidePanel.propTypes = {\r\n    charId: PropTypes.number,\r\n}\r\n\r\nexport default CharSidePanel;","import './Modal.sass'\r\n\r\nexport default function Modal({modalType}) {\r\n    \r\n    const modalUpdate =() => {\r\n        switch (modalType) {\r\n            case 'validationError':\r\n                return (\r\n                    <h3 className='modal__error'>This field is required</h3>\r\n                )\r\n            case'charFounded':\r\n                return (\r\n                    <div className='modal__success'>\r\n                        <h3 className='modal__success-text'>There is! Visit page?</h3>\r\n                        <button className='btn btn_gray'>TO PAGE</button>\r\n                    </div>\r\n                )\r\n            case'charNotFounded':\r\n                return(\r\n                    <h3 className='modal__error'>\r\n                        The character was not found. Check the name and try again\r\n                    </h3>\r\n                )\r\n            default:\r\n                return null\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className='modal'>\r\n                <div className='modal__title'>Or find a character by name:</div>\r\n            <form className='modal__form'>\r\n                <input id='search' name='search' type=\"text\" placeholder='Enter name'/>\r\n                <button className=\"btn btn_red\">FIND</button>\r\n            </form>\r\n            {modalUpdate()}\r\n        </div>\r\n    )\r\n}","import {useState} from 'react';\r\nimport RandomChar from '../randomChar/RandomChar';\r\nimport CharList from '../charList/CharList';\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\r\nimport CharSidePanel from '../charSidePanel/CharSidePanel';\r\nimport Modal from '../modal/Modal';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected =(id) => {\r\n        setChar(id)\r\n    }\r\n    return (\r\n        <>\r\n            <RandomChar/>\r\n            <section className=\"main\">\r\n              <CharList onCharSelected={onCharSelected}/>\r\n              <div>\r\n                <ErrorBoundary>\r\n                  <CharSidePanel charId={selectedChar}/>\r\n                </ErrorBoundary>\r\n                <Modal modalType={'validationError'}/>\r\n              </div>\r\n            </section>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MainPage;"],"names":["View","char","name","description","thumbnail","homepage","wiki","imgStyle","className","src","alt","style","href","rel","target","useState","setChar","useMarvelServices","error","getCharacter","loading","clearError","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","ref","el","tabIndex","onKeyDown","e","key","preventDefault","onCharSelected","renderItems","console","log","display","disabled","ErrorBoundary","state","componentDidCatch","errorInfo","setState","this","children","Component","Skeleton","comics","to","resourceURI","substr","charId","skeleton","Modal","modalType","type","placeholder","modalUpdate","selectedChar"],"sourceRoot":""}